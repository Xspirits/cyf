// Generated by CoffeeScript 1.7.1
(function() {
  var User;

  User = require("../app/models/user");

  module.exports = function(app, appKeys, eApi, mailer, _, grvtr, sio, passport, genUID, xp, notifs, moment, challenge, users, relations, games, social, ladder, shortUrl) {
    return {
      login: function(credentials, done) {
        return User.findOne({
          "local.email": credentials.email
        }).populate({
          path: 'friends.idUser'
        }).exec(function(err, userfound) {
          if (err) {
            done({
              passed: false,
              err: err
            });
          }
          if (!userfound) {
            done({
              passed: false,
              err: 'User not found, are you human?'
            });
          }
          if (!userfound.validPassword(credentials.password)) {
            return done({
              passed: false,
              err: 'Account existing but...Wrong password.'
            });
          } else {
            if (appKeys.app_config.email_confirm) {
              if (!userfound.verified) {
                done({
                  passed: false,
                  'Please confirm your email adress before entering the arena.': 'Please confirm your email adress before entering the arena.'
                });
              }
            }
            if (!userfound.sessionKey) {
              userfound.sessionKey = userfound.generateHash(userfound.local.pseudo + appKeys.express_sid_key);
              return userfound.save(function(err) {
                if (err) {
                  mailer.cLog('Error at ' + __filename, err);
                }
                notifs.login(userfound);
                return done({
                  passed: true,
                  user: userfound
                });
              });
            } else {
              return done({
                passed: true,
                user: userfound
              });
            }
          }
        });
      },
      register: function(signup, done) {
        var uID, uIDHash;
        uID = genUID.generate().substr(-6);
        uIDHash = genUID.generate().substr(-12);
        return User.findOne({
          "local.email": signup.email
        }, function(err, user) {
          var newUser;
          if (err) {
            return done({
              passed: false,
              err: err
            });
          }
          if (user) {
            return done({
              passed: false,
              err: 'That email is already taken.'
            });
          } else {
            newUser = new User();
            newUser.idCool = uID;
            newUser.userRand = [Math.random(), 0];
            newUser.verfiy_hash = uIDHash;
            if (appKeys.app_config.email_confirm === false) {
              newUser.verified = true;
            }
            newUser.local.email = signup.email;
            newUser.local.password = newUser.generateHash(signup.password);
            newUser.local.friends = [];
            newUser.local.pseudo = signup.pseudo;
            newUser.local.sentRequests = [];
            newUser.local.pendingRequests = [];
            newUser.local.followers = [];
            return grvtr.create(signup.email, {
              size: 150,
              defaultImage: "identicon",
              rating: "g"
            }, function(gravatarUrl) {
              newUser.icon = gravatarUrl;
              return newUser.save(function(err, user) {
                if (err) {
                  mailer.cLog('Error at ' + __filename, err);
                }
                xp.xpReward(user, "user.register");
                if (appKeys.app_config.email_confirm === false) {
                  return done({
                    passed: true,
                    user: newUser,
                    log: true
                  });
                } else {
                  return mailer.accountConfirm(user, function(returned) {
                    return done({
                      passed: true,
                      user: newUser,
                      log: false
                    });
                  });
                }
              });
            });
          }
        });
      }
    };
  };

}).call(this);
