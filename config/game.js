// Generated by CoffeeScript 1.7.1
(function() {
  var Game;

  Game = require("../app/models/game");


  /*
  Search through a REGEX in game list and return the result(s)
  @param  {string} search [the letters]
  @param  {Object} return [objects]
  @return {Callback}
   */

  module.exports = function(ent, moment) {
    return {
      create: function(req, done) {
        var data, gTitle, gType;
        data = req.body;
        gType = data['type'];
        gTitle = data['title'];
        console.log(gType, gTitle);
        if (gType && gTitle) {
          return Game.find({
            title: gTitle
          }).exec(function(err, games) {
            var game;
            if (err) {
              mailer.cLog('Error at ' + __filename, err);
            }
            if (games.length === 0) {
              game = new Game();
              game.title = data.title;
              game.type = data.type;
              return game.save(function(err) {
                if (err) {
                  mailer.cLog('Error at ' + __filename, err);
                }
                if (err) {
                  return done([false, err]);
                }
                return done(true);
              });
            } else {
              return done([false, 'game already registered']);
            }
          });
        }
      },
      getGame: function(id, done) {
        return Game.findById(id, function(err, game) {
          if (err) {
            mailer.cLog('Error at ' + __filename, err);
          }
          return done(game);
        });
      },
      regexFind: function(search, done) {
        var regex;
        regex = new RegExp(ent.encode(search), "i");
        return Game.find({
          title: regex
        }).sort({
          updated_at: -1
        }).sort({
          created_at: -1
        }).limit(7).exec(function(err, games) {
          var ret;
          if (err) {
            mailer.cLog('Error at ' + __filename, err);
          }
          if (!err) {
            ret = {
              data: games,
              go: 200
            };
          } else {
            ret = {
              data: JSON.stringify(err),
              go: 404
            };
          }
          return done(ret);
        });
      }
    };
  };

}).call(this);
