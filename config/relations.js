// Generated by CoffeeScript 1.7.1
(function() {
  var Challenge, User;

  User = require("../app/models/user");

  Challenge = require("../app/models/challenge");

  module.exports = function(mailer) {
    return {

      /*
      Return the current pending requests for a given user
      @param  {String}   idUser [user's id]
      @param  {Function} done   [description]
      @return {Object}          [List of ongoing requests]
       */
      getPending: function(idUser, done) {
        return Relation.findOne({
          idUser: idUser
        }).exec(function(err, data) {
          if (err) {
            mailer.cLog('Error at ' + __filename, err);
          }
          console.log(data);
          return done(data.pendingRequests);
        });
      },

      /*
      Create or update a relation with either a sending invite or pending one
      @param  {String}   from       [id of the sender]
      @param  {String}   to         [id of the receiver]
      @param  {Boolean}   thisIsSend [true or false]
      @param  {Function} done       [callback]
      @return {Boolean}              [true or false]
       */
      create: function(from, to, thisIsSend, done) {
        var pushing, query;
        query = void 0;
        pushing = void 0;
        if (thisIsSend) {
          pushing = "sentRequests";
          query = {
            $push: {
              sentRequests: {
                idUser: to.id,
                idCool: to.idCool,
                userName: to.userName
              }
            }
          };
        } else {
          pushing = "pendingRequests";
          query = {
            $push: {
              pendingRequests: {
                idUser: to.id,
                idCool: to.idCool,
                userName: to.userName
              }
            }
          };
        }
        return User.findOne({
          _id: from.id,
          $or: [
            {
              "sentRequests.idUser": to.id
            }, {
              "pendingRequests.idUser": to.id
            }
          ]
        }).exec(function(err, relation) {
          if (err) {
            mailer.cLog('Error at ' + __filename, err);
          }
          if (!relation) {
            console.log("Lets update");
            return User.findByIdAndUpdate(from.id, query).exec(function(err, updated) {
              done(true);
            });
          } else {
            return done(false, "already asked");
          }
        });
      },

      /*
      Accept a relation: add a new row and delete the pending ones
      @param  {[type]}   from [description]
      @param  {[type]}   to   [description]
      @param  {Function} done [description]
      @return {[type]}        [description]
       */
      acceptRelation: function(from, to, done) {
        return User.findByIdAndUpdate(from.id, {
          $pull: {
            sentRequests: {
              idUser: to.id
            }
          },
          $push: {
            friends: {
              idUser: to.id,
              idCool: to.idCool,
              userName: to.userName
            }
          }
        }, function(err, relationFrom) {
          if (err) {
            mailer.cLog('Error at ' + __filename, err);
          }
          console.log(relationFrom);
          return User.findByIdAndUpdate(to.id, {
            $pull: {
              pendingRequests: {
                idUser: from.id
              }
            },
            $push: {
              friends: {
                idUser: from.id,
                idCool: to.idCool,
                userName: from.userName
              }
            }
          }, function(err, relationTo) {
            var newRelation;
            if (err) {
              mailer.cLog('Error at ' + __filename, err);
            }
            newRelation = [relationFrom, relationTo];
            return done(newRelation);
          });
        });
      },
      cancelRelation: function(from, to, done) {
        return User.findByIdAndUpdate(from.id, {
          $pull: {
            pendingRequests: {
              idUser: to.id
            }
          }
        }, function(err, relation) {
          if (err) {
            mailer.cLog('Error at ' + __filename, err);
          }
          return User.findByIdAndUpdate(to.id, {
            $pull: {
              sentRequests: {
                idUser: from.id
              }
            }
          }, function(err, relation) {
            if (err) {
              mailer.cLog('Error at ' + __filename, err);
            }
            return done(true);
          });
        });
      },

      /*
      Deny a relation: delete the pending one from whom denied it.
      @param  {[type]}   from [description]
      @param  {[type]}   to   [description]
      @param  {Function} done [description]
      @return {[type]}        [description]
       */
      denyRelation: function(from, to, done) {
        return User.findByIdAndUpdate(to.id, {
          $pull: {
            sentRequests: {
              idUser: from.id
            }
          }
        }, function(err, relation) {
          if (err) {
            mailer.cLog('Error at ' + __filename, err);
          }
          return done(true);
        });
      }
    };
  };

}).call(this);
