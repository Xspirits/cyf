// Generated by CoffeeScript 1.7.1
(function() {
  var Badge, User;

  Badge = require("../models/badge");

  User = require("../models/user");

  module.exports = function(async, _, mailer, notifs, sio) {
    return {
      create: function(title, desc, reqBadges, requirement, done) {
        var newBadge, requiredBadges;
        if (reqBadges) {
          if (_.isArray(reqBadges)) {
            requiredBadges = reqBadges;
          } else {
            requiredBadges = [reqBadges];
          }
        }
        newBadge = new Badge();
        newBadge.title = title;
        newBadge.description = desc;
        newBadge.reqBadges = requiredBadges;
        if (requirement) {
          newBadge.requirement = requirement;
        }
        return newBadge.save(function(err) {
          if (err) {
            mailer.cLog('Error at ' + __filename, err);
          }
          return done(newBadge);
        });
      },
      tryUnlock: function(badges, user, done) {
        var _this;
        console.log('tryUnlock', badges, user.local.pseudo);
        _this = this;
        if (_.isArray(badges)) {
          return async.eachSeries(badges, (function(badge, next) {
            console.log('eachSeries', badge);
            _this.testUnique(badge, user, function(result) {
              if (result === true) {
                return _this.unlock(badge, user, function(result) {
                  if (result === true) {
                    console.log('new badge pushed');
                  } else {
                    console.log('new badge push failed');
                  }
                  return next();
                });
              }
            });
          }), function(err) {
            done();
          });
        } else {
          return _this.testUnique(badges, user, function(result) {
            if (result === true) {
              return _this.unlock(badges, user, function(result) {
                if (result === true) {
                  console.log('new badge pushed');
                } else {
                  console.log('new badge push failed');
                }
                return done();
              });
            }
          });
        }
      },
      unlock: function(badgeId, user, done) {
        console.log('unlock', badgeId, user.local.pseudo);
        return User.findByIdAndUpdate(user._id, {
          $addToSet: {
            'badges.idBadge': badgeId
          }
        }, function(err, userUpdated) {
          if (err) {
            console.log(err);
          }
          return Badge.update({
            _id: badgeId
          }, {
            $addToSet: {
              'ownedBy': user._id
            }
          }, function(err, nrow, badge) {
            if (err) {
              console.log(err);
            }
            return done(true);
          });
        });
      },
      testUnique: function(id, user, done) {
        console.log('testUnique', id, user.local.pseudo);
        return Badge.findById(id).exec(function(err, badge) {
          return done(true);
        });
      },
      withdraw: function(badgeId, user, done) {
        return User.findByIdAndUpdate(user._id, {
          $pull: {
            badge: {
              idBadge: badgeId
            }
          }
        }).exec(function(err, userUpdated) {
          if (err) {
            console.log(err);
          }
          return done(true);
        });
      }
    };
  };

}).call(this);
